package CrudeLevelRenderer
import RenderModule
import LevelData
import HashList
import LinkedList
import HashMap
import Execute
import LinkedListModule

/*
    Just create an image for each tile and object and then remove it again.
    Probably very bad but works for now :)
    Expect that images are sized exactly as their size, and add +2 as transparent margin
*/

let tileMap = new IterableMap<int, Image>

class Image
    use LinkedListModule
    int texId
    image img

    construct(image img, int texId)
        this.img = img
        this.texId = texId

    ondestroy
        img.remove()

public class CrudeLevelRenderer implements LevelRenderer
    private let imagePool = new IterableMap<int, LinkedList<Image>>
    private let usedImages = new LinkedList<Image>
    private LevelData data = null
    private var width = 0
    private var height = 0

    private function renderImage(string texture, vec2 size, vec2 pos, colorA color)
        let texId = texture.getHash()
        if not imagePool.has(texId)
            imagePool.put(texId, new LinkedList<Image>)

        let imageList = imagePool.get(texId)
        if imageList.isEmpty()
            imageList.add(new Image(createImage(texture, pos, size.x + 2, size.y + 2, ImageLayer.L3), texId))

        let img = imageList.pop()
        usedImages.push(img)
        img.img..setPos(pos)..setColor(color)..show()

    override function setLevelData(LevelData data)
        this.data = data
        width = data.getWidth()
        height = data.getHeight()
        for i = 0 to width - 1
            for j = 0 to height - 1
                let tile = data.getTile(i, j)
                if tile != null and tile.texturePath.isNotBlank()
                    tileMap.put(i + width * j, new Image(
                        createImage(tile.texturePath, vec2(data.getTileSize() * i, data.getTileSize() * j),
                        data.getTileSize() + 2, data.getTileSize() + 2, ImageLayer.L3)..show(), -1))

    override function draw()
        let itr = usedImages.iterator()
        for img from itr
            img.img.hide()
            imagePool.get(img.texId).add(img)
            itr.remove()
        itr.close()

        for gameObject in data.getObjects()
            renderImage(gameObject.texturePath, gameObject.size, gameObject.pos, gameObject.color)

    ondestroy
        for img from usedImages.staticItr()
            if img != null
                destroy img

        destroy usedImages

        for texId in imagePool
            destroy imagePool.get(texId)
        destroy imagePool

        execute() ->
            for key in tileMap
                destroy tileMap.get(key)

            tileMap.flush()

            Log.info("level flushed, images left: " + Image.size.toString())
