package Level
import LevelData
import RenderModule
import Players
import PlayerData
import PlayerHero
import ClosureTimers
import CollisionModule
import HashMap
import Entity
import SoundUtils
import Background

let FINISH_SOUND = new SoundDefinition(Sounds.hint, false)

public Level currentLevel = null

public class Level extends Entity
    private LevelData levelData
    private LevelRenderer renderer
    private CollisionHandler collision
    private let entityMap = new HashMap<ObjectData, Entity>
    private let backgrounds = new LinkedList<Background>

    Level nextLevel = null
    var finished = false
    var started = false

    private var donePlayers = 0

    construct(LevelData levelData, LevelRenderer renderer, CollisionHandler collision)
        this.levelData = levelData
        this.renderer = renderer
        this.collision = collision
        sleeps = false
        deactivate()

    function start()
        if started
            return

        renderer.setLevelData(levelData)
        collision.setLevelData(levelData)
        started = true
        currentLevel = this
        ALL_PLAYERS.forEach() p ->
            if p.getData().hero != null
                p.getData().hero.terminate()
            let hero = new PlayerHero(p, levelData.getStartPosition())
            p.getData().setHero(hero)
            backgrounds.push(new Background("bacground-foggy-forest.tga", vec2(0.6, 0.6), p))
            levelData.addObject(hero.objectData)
            entityMap.put(hero.objectData, hero)
        activate()

    override function update()
        if not finished
            for obj in levelData.getObjects()
                collision.apply(obj, entityMap.get(obj))

            for bg in backgrounds
                bg.render()
            renderer.draw()

            for p in ALL_PLAYERS
                if p.getData().hero != null
                    let pos = p.getData().hero.getPos()
                    let x = (pos.x / levelData.getTileSize()).round()
                    let y = (pos.y / levelData.getTileSize()).round()
                    if levelData.getTile(x, y).tilePos == levelData.getFinishTile()
                        levelData.removeObject(p.getData().hero.objectData)
                        p.getData().hero.terminate()
                        p.getData().hero = null
                        printTimed(p.getNameColored() + " finished!", 10.)
                        FINISH_SOUND.play()
                        donePlayers++
                        if donePlayers >= ALL_PLAYERS.size()
                            finished = true
                            if nextLevel != null
                                doAfter(0.5) ->
                                    nextLevel.start()
                                terminate()
                                currentLevel = null
                                break


    function getData() returns LevelData
        return levelData

    function getEntityMap() returns HashMap<ObjectData, Entity>
        return entityMap

    ondestroy
        destroy entityMap
        destroy backgrounds
        destroy levelData
        destroy renderer
        destroy collision

init
    EventListener.add(EVENT_PLAYER_END_CINEMATIC) ->
        if currentLevel != null
            let data = GetTriggerPlayer().getData()
            if data.hero != null
                currentLevel.getData().removeObject(data.hero.objectData)
                data.hero.terminate()
            let newHero = new PlayerHero(GetTriggerPlayer(), currentLevel.getData().getStartPosition())
            data.setHero(newHero)
            currentLevel.getData().addObject(newHero.objectData)
            currentLevel.getEntityMap().put(newHero.objectData, newHero)
