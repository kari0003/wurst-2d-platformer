package PlayerHero
import Entity
import DummyRecycler
import KeyUtils
import ObjectData
import Textures
import Interpolation
import AnimationHandler

public class PlayerHero extends Entity
    let objectData = new ObjectData()
    AnimationHandler animationHandler
    let dummyUnit = createUnit(owner, DUMMY_UNIT_ID, pos, 0 .fromDeg())
        ..setXY(pos)..addAbility(HEIGHT_ENABLER)..removeAbility(HEIGHT_ENABLER)..addAbility(LOCUST_ID)

    var acceleration = ZERO2
    var onGround = false

    construct(player owner, vec2 pos)
        super(owner, pos)
        sleeps = false
        objectData.texturePath = Textures.icon_folder_up
        objectData.size = vec2(72, 72)
        objectData.color = owner.getColor().toColor().withAlpha(225)

        animationHandler = new AnimationHandler(objectData.texturePath, STAND_ANIM.name)
        animationHandler.addAnimation(STAND_ANIM)
        animationHandler.addAnimation(LSTAND_ANIM)
        animationHandler.addAnimation(LWALK_ANIM)
        animationHandler.addAnimation(WALK_ANIM)

    function jump()
        if onGround
            vel.y = 18
            onGround = false


    override function update()
        super.update()
        dummyUnit.setXY(pos)
        objectData.pos = pos.toVec2()
        if not onGround
            vel.y += gravity

        checkInput(false)

        animationHandler.update()
        objectData.texturePath = animationHandler.getCurrentImage()


    function checkInput(boolean jump)
        let downKeys = owner.getDownKeys()
        if jump and downKeys.up
            jump()

        if downKeys.left and not downKeys.right
            acceleration = LEFT * 8
        else if downKeys.right and not downKeys.left
            acceleration = RIGHT * 8
        else
            acceleration = acceleration.lerp(ZERO2, 0.45)


        if not jump
            vel.x = vel.x.lerp(acceleration.x, 0.35)

        setState()


    function setState()
        let downKeys = owner.getDownKeys()
        if onGround and downKeys.left and not downKeys.right and vel.x < -2
            objectData.state = "lwalk"
            updateCurrentAnimation()
        else if onGround and downKeys.right and not downKeys.left and vel.x > 2
            objectData.state = "walk"
            updateCurrentAnimation()
        else if vel.x < -2
            objectData.state = "lstand"
            updateCurrentAnimation()
        else if vel.x > 2
            objectData.state = "stand"
            updateCurrentAnimation()

    function updateCurrentAnimation()
        if animationHandler.currentAnimation != objectData.state
            animationHandler.changeAnimation(objectData.state)

    ondestroy
        dummyUnit.remove()
        destroy animationHandler
