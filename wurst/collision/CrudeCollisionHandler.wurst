package CrudeCollisionHandler
import CollisionModule
import LevelData
import Entity
import PlayerHero

public constant INSTANCE = new CrudeCollisionHandler

public class CrudeCollisionHandler implements CollisionHandler
    LevelData levelData

    override function setLevelData(LevelData levelData)
        this.levelData = levelData

    override function apply(ObjectData data, Entity entity)
        var entityVel = entity.getVel()
        let futurePos = entity.getPos() + entityVel
        let cornerLT = futurePos + vec2(-(data.size.x / 2), (data.size.y / 2))
        let cornerRT = futurePos + vec2((data.size.x / 2), (data.size.y / 2))
        let cornerLB = futurePos + vec2(-(data.size.x / 2), -(data.size.y / 2))
        let cornerRB = futurePos + vec2((data.size.x / 2), -(data.size.y / 2))

        if entityVel.x > 0
            // moving to the right, if right corners are blocked, negate x vel
            if getTile(cornerRT + vec2(1,0)).pathing == Pathing.BLOCKED
                or getTile(cornerRB + vec2(1,4)).pathing == Pathing.BLOCKED
                entityVel.x = 0
        else if entityVel.x < 0
            // moving to the left, if left corners are blocked, negate x vel
            if getTile(cornerLT + vec2(-1,0)).pathing == Pathing.BLOCKED
                or getTile(cornerLB + vec2(-1,4)).pathing == Pathing.BLOCKED
                entityVel.x = 0
        if entityVel.y > 0
            // jumping up, if top corners are blocked, negate y vel
            if getTile(cornerLT + vec2(4, 1)).pathing == Pathing.BLOCKED
                or getTile(cornerRT - vec2(4, 1)).pathing == Pathing.BLOCKED
                entityVel.y = 0
        else if entityVel.y < 0
            // falling down up, if bottom corners are blocked, negate y vel
            if getTile(cornerLB + vec2(4, 0)).pathing == Pathing.BLOCKED
                or getTile(cornerRB - vec2(4, 0)).pathing == Pathing.BLOCKED
                entityVel.y = 0

        if entity instanceof PlayerHero
            Log.info("onG: " + (entity castTo PlayerHero).onGround.toString())
            (entity castTo PlayerHero).onGround = (getTile(cornerLB + vec2(2, -1)).pathing == Pathing.BLOCKED
                                                and getTile(cornerLB + vec2(2, 1)).pathing == Pathing.FREE)
                                               or (getTile(cornerRB - vec2(2, 1)).pathing == Pathing.BLOCKED
                                                and getTile(cornerRB - vec2(2, -1)).pathing == Pathing.FREE)

        entity.setVel(entityVel)

    function getTile(vec3 pos) returns TileData
        let x = (pos.x / levelData.getTileSize()).round()
        let y = (pos.y / levelData.getTileSize()).round()
        return levelData.getTile(x, y)


